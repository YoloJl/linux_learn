chapter 5
    date
    cal     
        cal 10 2018
    bc
    man
        / ？：查询
        1：可操作的命令或可执行文件
        5：配置文件或者是某些文件的格式
        8：系统管理员可用的命令
    who
    netstat -a
    ps -aux
    shutdown
        shutdown -h now
        shutdown -h +10/22:24 'message'
    reboot/half/poweroff
    init 0/3/5/6


chapter 6
    chgrp
     	chrgp groupname file
    chown
    	chown ownername file
    chmod
   		chmod 777 file
          chmod u=rwx,go=rx file
     	chmod a+w file
     	chmod a-w file
    文件权限
    目录权限
    绝对路径
    相对路径

chapter 7
    .
    ..
    -
    ~
    ~account
    mkdir
        -p
        -m
    执行文件路径变量:PATH
    ls
        -a
        -d
        -l
    cp
        -a
        -i
        -p    连同文件属性复制
        -r
    rm
        -i
        -r
        -f
    mv
        -f
        -i
        -u    若目标文件存在，且source比较新才更新
    文件内容查阅
        cat
            -n
        tac
        nl
        more    一页一页翻动，只可向下
        less    一页一页翻动，可上可下
        head
            -n
        tail
            -n
        od      非纯文本文件
            -t  a/c/d/f/o/x
    touch
        mtime    内容改则改
        ctime    权限和属性改则改
        atime    内容被取用则改动
        -a    仅修改访问时间
        -c    修改文件时间，若不存在，则创建文件
        -d    接欲修改的时间
        -m    修改mtime
        -t
        ls默认显示mtime
    默认访问权限
        umask
            文件： -rw-rw-rw- - umask
            目录： drwxrwxrwx - umask
    文件隐藏属性
        chattr [+-=][属性] 文件或目录名称
        lsattr
        属性
            a    一旦设置，文件只能增加数据，不能删除也不能修改数据
            i    让一个文件不能被删除，改名，设置连接也无法写入或者添加数据，可以帮助增加系统的安全性
    文件特殊属性
        SUID
            只对文件有效
                当s出现在文件所有者的x权限上时，称为Set UID
                SUID权限仅对二进制程序有效
                执行者对于该程序需要具有x的执行权限
                本权限仅在执行该程序过程中有效
                执行者将具有该程序所有者的权限
                ls -l /usr/bin/passwd
                -rwsr-xr-x
        SGID
            除了文件，也能用在目录上
                当s出现在用户组的x权限上时，称为Set GID
                SGID对二进制程序有用
                执行者对于该程序需要具有x的执行权限
                执行者在执行过程中获得该程序用户组的支持

            当一个目录设置了SGID：
                                用户对此目录具有r与x权限时，该用户能进入该目录
                                用户在此目录下的有效用户组将会变成该目录的用户组
                                若用户在此目录下具有w的权限，则新创建的新文件的用户组与此目录用户组相同
        SBIT sticky bit
            只针对目录有效
                当用户在该目录下创建文件或目录时，只有root与自己可以删除该文件

        使用方式
            在三个数字之前加一个数
                4：SUID
                2：SGID
                1：SBIT
    file
        查看文件类型
    命令与文件的查询
        which   查询执行文件
            -a

        查找数据库文件中的文件记录
            whereis
                -b    查询二进制文件
                -m    查找在说明文件manual路径下的文件
                -s    只找source源文件
                -u    查找不在上述三个选项中的其他特殊文件
            locate
                -i    忽略大小写
                -r    后面可接正则表达式的显示方式
            updatedb
        查找硬盘
            find [PATH] [OPTION] [ACTION]
                时间有关的参数
                    -mtime -4
                    -mtime 4
                    -mtime +4
                用户和用户组有关的参数
                    -uid n
                    -gid n
                    -user name
                    -group name
                    -nouser
                    -nogroup
                文件权限及名称有关的参数
                    -name filename
                    -size [+-]SIZE
                    -type TYPE
                            TYPE: f/b、c/d/l/s/p
                    -perm mode  正好
                    -perm -mode 包含所有
                    -perm +mode 包含任一
                其他可执行的操作
                    -exec command
                    -print

                find / -perm +7000 -exec ls -l {} \;
                find查找到的结果会被放到{}中， 被ls -l 执行

        权限与命令的关系
            让目录成为可工作目录：
                用户对该目录至少具有x的权限
                若用ls等命令，还需要r权限
            读取一个文件：
                用户对目录：x
                用户对文件：r
            修改一个文件：
                用户对目录：x
                用户对文件：r w
            创建一个文件：
                用户对目录：w x
            进入目录执行文件：
                用户对目录：x
                用户对文件：x
chapter 8
	df	列出文件系统的整体磁盘使用量
		-h	以kb mb gb形式表示
		-i	不用硬盘容量，以inode的形式表示
	du	评估文件系统的磁盘使用量，常用于目录
		-s	列出总量，而不列出每个个别的目录占用总量
	
	硬连接与软连接
		硬连接
			在某个目录下新建一条文件名连接到某inode号码关联的记录
			不会占用inode和block
			ln src dft
			缺点
				不能跨文件系统
				不能连接到目录
		软连接
			创建一个独立的文件，这个文件会让数据的读取指向它连接的那个文件的文件名
			所以当源文件被删除之后，软连接的文件无法打开
			会占用inode和block
			ln [-sf] src dst
	fdisk

chapter 9
	.z
	.gz
	.bz2
	.tar
	.tar.gz
	.tar.bz2

	gzip zcat	.gz
		gzip [-cdtv#] 文件名
		gcat 文件名

		-c	降压缩的数据输出到屏幕上
		-d	解压缩的参数
		-t	检验压缩文件的一致性，看看有无错误
		-v	显示源文件与压缩文件的压缩比等信息
		-#	压缩等级	-1最快，但压缩比最差	默认为-6

	bzip bzcat	.bz2
		bzip [-cdkzv#] 文件名
		bzcat 文件名
		-k	保留原文件
		-z	压缩的参数
	
	tar
		压缩	-jcv -f filename.tar.bz2 要被压缩的文件或目录
		查询	-jtv -f filename.tar.bz2
		解压缩	-jxv -f filename.tar.bz2 -C 欲解压的目录
		-z	gzip	.tar.gz
		-j	bzip2	.tar.bz2

	dump
		备份
	restore
		恢复

chapter 10
	vim

chapter 11
	内核
		管理整个计算机硬件
		我们通过shell与内核通信，让内核可以控制硬件准确无误的工作

	bash shell
		history	默认一千个

		alias	命令别名设置

		echo unset

		'	反单引号，先执行反单引号之内的命令
			ls -l 'locate crontab'

	环境变量
		env
			HOME
			SHELL
			HISTSIZE
			MAIL
			PATH
				执行文件的查找路径
			LANG
			RANDOM
				产生0-9之间的随机数
				declare -i number=$RANDOM*10/32767 ;echo $number
		set
			产看所有变量
		
		$	代表本shell的PID
		echo $? 查看上一个命令是否成功执行
		
		export 
			自定义变量转换成环境变量
		
		read
			-p	可接提示符
			-t	可接等待时间
			读取来自键盘的输入的变量
			read -p "please keyin your name: " -t 30 named

		declare/typeset
			声明变量的类型，默认为字符串
			-a	数组	
			-i	int
			-x	环境变量
			-r	只读
		
		ulimit
			文件系统与程序的限制关系

		变量内容的删除、替代与替换
			variable#/*
				#代表从前面开始删除，且仅删除最短的一个
				##符合替换文字的最长的那一个
			从后向前删除
				%
				%%

			${variable#关键字}

			${variable##关键字}

			${variable%关键字}

			${variable%%关键字}

			${variable/旧字符串/新字符串}

			${variable//旧字符串/新字符串}
			
			变量设置方式		str未设置	设置为空	设置为非空
			var=${str-expr}		var=expr	var=		var=$str

			var=${str:-expr}	var=expr	var=expr	var=$str

			var=${str+expr}		var=		var=expr	var=expr

			var=${str:+expr}	var=		var=		var=expr

			var=${str=expr}		str=expr	str不变		str不变
								var=expr	var=		var=$str

			var=${str:=expr}	str=expr	str=expr	str不变
								var=expr	var=expr	var=$str

			var=${str?expr}		expr输出	var=		var=str
								至stderr

			var=${str:?expr}	expr输出	expr输出	var=str
								至stderr	至stderr

	命令别名与历史命令
		alias
			别名='命令'
		unalias
		
		history
			-n
			-c
				消除目前shell中的history
			-a
				将新增的history命令增入histfiles中
			-r
				将histfiles内容读取到shell的history记忆中
			-w
				将目前记忆内容写入histfile

			！number
				执行第几条命令
			！command
				向前搜索由command开头的命令，并执行

	bashshell的操作环境
		路径与命令查找顺序
			1.以绝对路径或者相对路径执行
			2.由alias找到该命令来执行
			3.由bash内置的命令来执行
			4.由$PATH变量的顺序找到的第一个命令来执行

		bash环境配置文件
			login shell
				会读取以下两个文件
					/etc/profile
						系统的整体设置，最好不要修改
					~/.bash_profile或~/.bash_login或~/.profile
						用户个人的设置

			non-login shell
				会读取~/.bashrc

			source
				读入环境配置文件

		stty
			-a	查看目前环境中所有的按键列表

		通配符与特殊符号
			*
			?
			[]
				有一个字符
			[-]
				代表编码顺序在内的所有字符
			[^]
				非
		
		数据流重定向
			标准输入
				0	< <<
			标准输出
				1	> >>
			标准错误输出
				2	2> 2>>

			吃掉所有错误信息
				2> /dev/null
			
			创建新文件
				cat > catfile < ~/.bashrc

		管道命令pipe
			ls -al /etc | less

			'|'
				仅能处理由前一个命令传过来的正确信息，对错误信息无法处理
				每个管道后面界的第一个数据必然是命令，而且该命令必须要能够接收standard input
				
			选取命令
				cut
					从一行信息中取出想要的
					-d '分隔字符' -f fields
					-c 字符范围
				
				grep
					从一行信息中分析信息
					grep [-acinv] [--color=auto] '查找字符串' filename
					-a
						将binary文件以text文件的方式去查找
					-c
						计算找到的'查找字符串'的次数
					-i
						忽略大小写
					-n
						顺序输出行号
					-v	
						反向选择
			
			排序命令
				sort
					-f
						忽略大小写
					-u
						uniq
				wc
					-l
						仅列出行
					-w
						仅列出多少字
					-m
						列出多少字符
				uniq
					-i
					-c
			
		双向重定向
			tee

		字符转换命令
			tr
				删除一段信息当中的文字，或者进行文字信息的转换
				-d
					删除
				last | tr '[a-z]' '[A-Z]'
			col
				-x
					将tab键转换为对应的空格键
				-b
					在文字内有反斜线时，仅保留最后接的那个字符
			join
				将两个文件中有相同数据的一行加在一起
				join [-ti12] file1 file2

				join -t ':' -1 4 file1 -2 3 file2
			paste
				将两行粘贴在一起，以tab隔开
				-d
					指定分隔字符
			expand
				将tab转换为空格
				-t
					指定一个tab转换为多少个空格

		切割命令
			split [-bl] file prefix

chapter 12
	正则表达式
		[:alnum:]
		[:alpha:]
		[:blank:]
		[:cntrl:]
		[:digit:]
		[:graph:]
		[:lower:]
		[:print:]
		[:punct:]
		[:upper:]
		[:space:]
		[:xdigit]
		
	grep
		从一行信息中分析信息
		grep [-acinv] [--color=auto] '查找字符串' filename
		-a
			将binary文件以text文件的方式去查找
		-c
			计算找到的'查找字符串'的次数
		-i
			忽略大小写
		-n
			顺序输出行号
		-v	
			反向选择

		grep [-A] [-B] [--color=auto] '搜寻字符串' filename
		-A
			后面跟数字，after，代表除了该行，后续的n行也列出来 
		-B
			后面跟数字，before，代表除了该行，前面的n行也列出来

		grep在查找数据的过程中是以行为单位来进行数据的选取的

	sed
		sed [-neft] [动作]

		-n
			slient
		-e
			直接在命令行模式上进行sed动作编辑
		-f
			将sed的动作写在一个文件里
		-r
			支持扩展正则表达式语法
		-i
			直接修改读取的内容，而不是屏幕输出

		[动作]
			[n1,n2] function
				a
				c
				d
				i
				p
				s
					sed 's/^.*addr://g'
	
	awk
		适合小型数据字段的处理，默认分隔符为空格或Tab
		awk '条件类型1{动作1}  条件类型2{动作2} ...' filename

		内置变量
			NF
				每一行拥有的字段总数
			NR
				目前awk所处理的是第几行的数据
			FS
				目前的分隔符






			
		














